{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "test",
    "license": {
      "name": "ISC"
    }
  },
  "servers": [
    {
      "url": "https://powerful-savannah-96936.herokuapp.com"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags":[
          "Users"
        ],
        "summary": "Returns Users",
        "operationId": "getAllUsers",
        "description": "Returns the users",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json" : {
                "schema": {
                      "$ref": "#/components/schemas/SecurityReq"
                }
              }
            }
          }
        }
      }
    },
    "/users/create": {
      "post": {
        "tags":[
          "Users"
        ],
        "summary": "Creates a User",
        "operationId": "createUser",
        "requestBody": {
          "description": "Creates a new user object ",
          "required": true,
          "content": {
            "application/json" : {
              "schema": {
                    "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User Created"
          },
          "400": {
            "description": "Error creating user password and email required"
          }
        }
      }
    },
    "/users/{email}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns a user with a specific email",
        "operationId": "getUserByEmail",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "description": "The email that needs to be used to fetch. Use test2@gmail.com to test. ",
            "schema": {
              "type": "string"
            },
            "required": true
          }
          ],
        "responses": {
          "200": {
            "description": "User found"
          },
          "404": {
            "description": "User with that email does not exist"
          }
        }
      }
    },
    "/users/delete/{email}":{
      "delete": {
        "tags":[
          "Users"
        ],
        "summary": "Deletes a user",
        "operationId": "deleteUserByEmail",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "description": "The email that needs to be used to fetch and delete. Try hitting the end point that returns all users and pick an email to delete. ",
            "schema": {
              "type": "string"
            },
            "required": true
          }
          ],
          "responses": {
            "200": {
              "description": "User deleted",
              "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The user ID",
                  "username": {
                  "type": "string",
                  "description": "The user name."
                }
              }
            }
          }
        },
            "400": {
              "description": "User with that email does not exist"
            }
          }
      }
    },
    "/api/public/merchants": {
      "get": {
        "tags": [
          "Users"
      ],
      "summary": "Get all merchants",
      "operationId": "Merchant Management",
      "responses": {
        "401": {
          "description": "Unauthorized"
      },
      "500": {
        "description": "Server Error"
      },
      "200": {
        "description": "Success",
      "content": {
      "text/plain": {
      "schema": {
      "$ref": "#/components/schemas/AllMerchantsResult"
      }
      },
      "application/json": {
      "schema": {
      "$ref": "#/components/schemas/AllMerchantsResult"
      }
      },
      "text/json": {
      "schema": {
      "$ref": "#/components/schemas/AllMerchantsResult"
      }
      }
      }
      }
      },
      "security": [
      {
      "Protected Api Token": [ ]
      }
      ]
      }
  },
  "components": {
    "schemas": {
      "SecurityReq": {
        "type": "array",
        "properties": {
          "authFlags": [
            "dev", 
            "admin"
          ]
        }
      },
      "User": {
        "type": "object",
        "required": [
          "email", "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "user's email"
          },
          "firstName": {
            "type": "string",
            "description": "user's first name"
          },
          "lastName": {
            "type": "string",
            "description": "user's last name"
          },
          "password": {
            "type": "string",
            "description": "user's password"
          }
        }
      }
    }
  }
}
}

